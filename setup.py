"""
Setup script for Slouching Detector
Run this script to configure your API keys and settings in .env file
"""

import os
import shutil

def create_env_file():
    """Create .env file from template if it doesn't exist"""
    if not os.path.exists('.env'):
        if os.path.exists('.env.example'):
            print("Creating .env file from template...")
            shutil.copy('.env.example', '.env')
        else:
            print("Creating new .env file...")
            with open('.env', 'w') as f:
                f.write("""# Slouching Detector Environment Variables

# Roboflow Configuration
ROBOFLOW_API_KEY=your_roboflow_api_key_here
ROBOFLOW_PROJECT=your_project_name
ROBOFLOW_VERSION=1

# Spotify Configuration  
SPOTIFY_CLIENT_ID=your_spotify_client_id
SPOTIFY_CLIENT_SECRET=your_spotify_client_secret
SPOTIFY_REDIRECT_URI=http://localhost:8888/callback

# Detection Settings
CONFIDENCE_THRESHOLD=0.5
DETECTION_INTERVAL=1.0

# Brightness Settings
NORMAL_BRIGHTNESS=100
SLOUCHING_BRIGHTNESS=20

# Sleep Mode Settings
USER_ABSENT_TIMEOUT=30
""")
        print(".env file created!")

def read_env_file():
    """Read current .env file values"""
    env_vars = {}
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    return env_vars

def write_env_file(env_vars):
    """Write updated environment variables to .env file"""
    with open('.env', 'w') as f:
        f.write("# Slouching Detector Environment Variables\n")
        f.write("# Generated by setup script\n\n")
        
        f.write("# Roboflow Configuration\n")
        f.write(f"ROBOFLOW_API_KEY={env_vars.get('ROBOFLOW_API_KEY', 'your_roboflow_api_key_here')}\n")
        f.write(f"ROBOFLOW_PROJECT={env_vars.get('ROBOFLOW_PROJECT', 'your_project_name')}\n")
        f.write(f"ROBOFLOW_VERSION={env_vars.get('ROBOFLOW_VERSION', '1')}\n\n")
        
        f.write("# Spotify Configuration\n")
        f.write(f"SPOTIFY_CLIENT_ID={env_vars.get('SPOTIFY_CLIENT_ID', 'your_spotify_client_id')}\n")
        f.write(f"SPOTIFY_CLIENT_SECRET={env_vars.get('SPOTIFY_CLIENT_SECRET', 'your_spotify_client_secret')}\n")
        f.write(f"SPOTIFY_REDIRECT_URI={env_vars.get('SPOTIFY_REDIRECT_URI', 'http://localhost:8888/callback')}\n\n")
        
        f.write("# Detection Settings\n")
        f.write(f"CONFIDENCE_THRESHOLD={env_vars.get('CONFIDENCE_THRESHOLD', '0.5')}\n")
        f.write(f"DETECTION_INTERVAL={env_vars.get('DETECTION_INTERVAL', '1.0')}\n\n")
        
        f.write("# Brightness Settings\n")
        f.write(f"NORMAL_BRIGHTNESS={env_vars.get('NORMAL_BRIGHTNESS', '100')}\n")
        f.write(f"SLOUCHING_BRIGHTNESS={env_vars.get('SLOUCHING_BRIGHTNESS', '20')}\n\n")
        
        f.write("# Sleep Mode Settings\n")
        f.write(f"USER_ABSENT_TIMEOUT={env_vars.get('USER_ABSENT_TIMEOUT', '30')}\n")

def setup_roboflow(current_vars):
    print("\n=== Roboflow Setup ===")
    print("Please provide your Roboflow credentials:")
    print("Get these from: https://roboflow.com/")
    
    current_key = current_vars.get('ROBOFLOW_API_KEY', 'your_roboflow_api_key_here')
    current_project = current_vars.get('ROBOFLOW_PROJECT', 'your_project_name')
    current_version = current_vars.get('ROBOFLOW_VERSION', '1')
    
    if current_key != 'your_roboflow_api_key_here':
        print(f"Current API Key: {current_key[:10]}...")
    
    api_key = input(f"Roboflow API Key [{current_key if current_key != 'your_roboflow_api_key_here' else 'required'}]: ").strip()
    project_name = input(f"Project Name [{current_project}]: ").strip()
    version = input(f"Model Version [{current_version}]: ").strip()
    
    return {
        "ROBOFLOW_API_KEY": api_key if api_key else current_key,
        "ROBOFLOW_PROJECT": project_name if project_name else current_project,
        "ROBOFLOW_VERSION": version if version else current_version
    }

def setup_spotify(current_vars):
    print("\n=== ðŸŽµ Spotify Setup ===")
    print("Please provide your Spotify app credentials:")
    print("Create an app at: https://developer.spotify.com/dashboard")
    
    current_id = current_vars.get('SPOTIFY_CLIENT_ID', 'your_spotify_client_id')
    current_secret = current_vars.get('SPOTIFY_CLIENT_SECRET', 'your_spotify_client_secret')
    current_uri = current_vars.get('SPOTIFY_REDIRECT_URI', 'http://localhost:8888/callback')
    
    if current_id != 'your_spotify_client_id':
        print(f"Current Client ID: {current_id[:10]}...")
    
    client_id = input(f"Client ID [{current_id if current_id != 'your_spotify_client_id' else 'required'}]: ").strip()
    client_secret = input(f"Client Secret [{current_secret if current_secret != 'your_spotify_client_secret' else 'required'}]: ").strip()
    redirect_uri = input(f"Redirect URI [{current_uri}]: ").strip()
    
    return {
        "SPOTIFY_CLIENT_ID": client_id if client_id else current_id,
        "SPOTIFY_CLIENT_SECRET": client_secret if client_secret else current_secret,
        "SPOTIFY_REDIRECT_URI": redirect_uri if redirect_uri else current_uri
    }

def setup_detection_settings(current_vars):
    print("\n=== Detection Settings ===")
    
    current_confidence = current_vars.get('CONFIDENCE_THRESHOLD', '0.5')
    current_interval = current_vars.get('DETECTION_INTERVAL', '1.0')
    current_normal = current_vars.get('NORMAL_BRIGHTNESS', '100')
    current_slouch = current_vars.get('SLOUCHING_BRIGHTNESS', '20')
    current_timeout = current_vars.get('USER_ABSENT_TIMEOUT', '30')
    
    confidence = input(f"Confidence Threshold (0.0-1.0) [{current_confidence}]: ").strip()
    interval = input(f"Detection Interval in seconds [{current_interval}]: ").strip()
    normal_brightness = input(f"Normal Brightness % [{current_normal}]: ").strip()
    slouching_brightness = input(f"Slouching Brightness % [{current_slouch}]: ").strip()
    absent_timeout = input(f"User Absent Timeout in seconds [{current_timeout}]: ").strip()
    
    return {
        "CONFIDENCE_THRESHOLD": confidence if confidence else current_confidence,
        "DETECTION_INTERVAL": interval if interval else current_interval,
        "NORMAL_BRIGHTNESS": normal_brightness if normal_brightness else current_normal,
        "SLOUCHING_BRIGHTNESS": slouching_brightness if slouching_brightness else current_slouch,
        "USER_ABSENT_TIMEOUT": absent_timeout if absent_timeout else current_timeout
    }

def main():
    print("Welcome to Slouching Detector Setup!")
    print("This script will help you configure the application using environment variables.")
    print("Your settings will be stored securely in a .env file (ignored by git).")
    
    try:
        # Create .env file if it doesn't exist
        create_env_file()
        
        # Read current values
        current_vars = read_env_file()
        
        # Setup each section
        roboflow_config = setup_roboflow(current_vars)
        spotify_config = setup_spotify(current_vars)
        detection_config = setup_detection_settings(current_vars)
        
        # Merge all configurations
        all_vars = {**current_vars, **roboflow_config, **spotify_config, **detection_config}
        
        # Write to .env file
        write_env_file(all_vars)
        
        print("\nSetup completed successfully!")
        print("Configuration saved to .env file")
        print(".env file is ignored by git for security")
        
        print("\nNext steps:")
        print("1. Make sure you have a webcam connected")
        print("2. Ensure Spotify is installed and you're logged in")
        print("3. Run: python gui_app.py")
        
        # Test configuration
        print("\nTesting configuration...")
        try:
            import config
            missing = config.validate_config()
            if missing:
                print(f"Missing configuration: {', '.join(missing)}")
                print("Please run setup again to complete configuration.")
            else:
                print("All configuration looks good!")
                config.print_config_status()
        except Exception as e:
            print(f"Error testing configuration: {e}")
        
    except KeyboardInterrupt:
        print("\nSetup cancelled.")
    except Exception as e:
        print(f"\nError during setup: {e}")

if __name__ == "__main__":
    main()
